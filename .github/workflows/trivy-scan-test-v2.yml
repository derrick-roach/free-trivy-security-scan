# Trivy Scan Testing v2

# WIP. Use image from GitHub Issue as target, 
# update the issue with the security scan results, 
# and link to the artifact for download.

name: Trivy Scan Testing v2

# Controls when the workflow will run
on:
  issues:
    types: [opened, edited]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Add permissions block at the workflow level
permissions:
    contents: read
    issues: write

jobs:
  trivy-scan-test:
    name: Trivy Scan Testing v2

    # Check issue label and body contains Image Reference section
    if: |
      contains(github.event.issue.labels.*.name, 'security-scan-request') && 
      contains(github.event.issue.body, 'Image Reference')
    
    runs-on: ubuntu-latest

    steps:
      - name: Echo current date
        run: echo $NOW  # Show datetime

      - name: Extract image ref from issue
        id: extract-image
        uses: actions/github-script@v6
        with:
          script: |
            const body = context.payload.issue.body;
            if (!body) {
              core.setFailed('Issue body is empty');
              return;
            }
            
            // Extract image reference from the form field
            // Look for the "Image Reference" section and get the value after it
            const lines = body.split('\n');
            let imageRefIndex = -1;
            
            // Find the line that contains "Image Reference"
            for (let i = 0; i < lines.length; i++) {
              if (lines[i].includes('Image Reference')) {
                imageRefIndex = i;
                break;
              }
            }
            
            if (imageRefIndex === -1) {
              core.setFailed('Image Reference section not found in issue body');
              return;
            }
            
            // Look for the image reference in the lines following the "Image Reference" header
            let ref = '';
            for (let i = imageRefIndex + 1; i < lines.length; i++) {
              const line = lines[i].trim();
              // Skip empty lines and markdown formatting
              if (line && !line.startsWith('#') && !line.startsWith('_') && !line.startsWith('*')) {
                ref = line;
                break;
              }
            }
            
            // Basic validation: image reference should contain at least a colon (for tag) or slash (for registry/org)
            if (ref && (ref.includes(':') || ref.includes('/'))) {
              console.log(`Extracted image: ${ref}`);
              core.setOutput('ref', ref);
              return ref;
            } else {
              core.setFailed('Invalid image reference format. Please provide a valid image reference like "alpine:latest" or "grafana/grafana:main"');
            }

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Run trivy action for security scan
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ steps.extract-image.outputs.ref }}
          scan-type: 'image'
          format: 'json'
          output: 'security-results.json'
          vuln-type: os,library
          github-pat: ${{ secrets.GITHUB_TOKEN }}

      - name: Run trivy action for table format report
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ steps.extract-image.outputs.ref }}
          scan-type: 'image'
          format: 'table'
          output: 'trivy-report'
          vuln-type: os,library
          github-pat: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload trivy report as a GitHub artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-security-report
          path: '${{ github.workspace }}/security-results.json'
          retention-days: 90 # 90 is the default

      - name: Upload trivy table report as a GitHub artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-table-report
          path: '${{ github.workspace }}/trivy-report'
          retention-days: 90 # 90 is the default

      - name: Extract report summary from trivy-report
        id: extract-summary
        run: |
          if [ -f "trivy-report" ]; then
            # Extract the summary section from the table report
            # Look for vulnerability counts and summary information
            summary=$(head -50 trivy-report | grep -E "(Total:|CRITICAL|HIGH|MEDIUM|LOW|UNKNOWN)" | head -20)
            
            # If no summary found, take first 20 lines as fallback
            if [ -z "$summary" ]; then
              summary=$(head -20 trivy-report)
            fi
            
            # Escape special characters for multiline output
            {
              echo 'summary<<EOF'
              echo "$summary"
              echo 'EOF'
            } >> $GITHUB_OUTPUT
            
            echo "Summary extracted successfully"
          else
            echo "trivy-report file not found"
            echo 'summary=No report summary available' >> $GITHUB_OUTPUT
          fi

      - name: Comment on issue with results
        if: github.event_name == 'issues'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.payload.issue.number;
            const imageRef = '${{ steps.extract-image.outputs.ref }}';
            const runId = context.runId;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;
            const reportSummary = `${{ steps.extract-summary.outputs.summary }}`;

            // Fetch artifacts for this workflow run
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: repoOwner,
              repo: repoName,
              run_id: runId
            });

            // Find the trivy artifacts
            const trivyJsonArtifact = artifacts.data.artifacts.find(artifact => 
              artifact.name === 'trivy-security-report'
            );
            
            const trivyTableArtifact = artifacts.data.artifacts.find(artifact => 
              artifact.name === 'trivy-table-report'
            );

            // Create links to the workflow run's artifacts
            const jsonArtifactId = trivyJsonArtifact ? trivyJsonArtifact.id : null;
            const tableArtifactId = trivyTableArtifact ? trivyTableArtifact.id : null;
            const artifactLink = `https://github.com/${repoOwner}/${repoName}/actions/runs/${runId}`;
            
            // Direct download links if we found the artifact IDs
            const jsonDownloadLink = jsonArtifactId ? 
            `https://github.com/${repoOwner}/${repoName}/actions/runs/${runId}/artifacts/${jsonArtifactId}` : null;
            
            const tableDownloadLink = tableArtifactId ? 
            `https://github.com/${repoOwner}/${repoName}/actions/runs/${runId}/artifacts/${tableArtifactId}` : null;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `## 🔎 Trivy Security Scan Results 🔍

            ## Security Scan 👉 ${imageRef}

            <br>

            ### 📊 Report Summary
            \`\`\`
            ${reportSummary}
            \`\`\`

            👇 Get the full report and details with the links below.
            
            ### 🔗 Links
            - [🔍 See the workflow run and artifacts](${artifactLink})
            - [⬇️ Download JSON security report](${jsonDownloadLink})
            - [⬇️ Download table format report](${tableDownloadLink})
            
            🚀`
            });



        
